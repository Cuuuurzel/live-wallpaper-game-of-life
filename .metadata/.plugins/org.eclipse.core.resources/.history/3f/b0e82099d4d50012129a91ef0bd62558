package com.cuuuurzel.gollivewallpaper;

import android.graphics.Canvas;
import android.graphics.Paint;
import android.os.Handler;
import android.os.SystemClock;
import android.service.wallpaper.WallpaperService;
import android.view.MotionEvent;
import android.view.SurfaceHolder;

public class GolWallpaper extends WallpaperService {

	private final Handler mHandler = new Handler();
	int sw, sh;
	
	@Override
	public Engine onCreateEngine() {
		return new GolEngine();
	}

	class GolEngine extends Engine {

		private final Paint mPaint = new Paint();
		private float mTouchX = -1;
		private float mTouchY = -1;
		private long mStartTime;
		private GameOfLife game;

		private final Runnable mSampleDraw = new Runnable() {
			public void run() {
				drawFrame();
			}
		};

		private boolean mVisible;

		public GolEngine() {
			final Paint paint = mPaint;
			paint.setColor(0xffffffff);
			paint.setAntiAlias(true);
			paint.setStrokeWidth(1);
			paint.setStrokeCap(Paint.Cap.ROUND);
			paint.setStyle(Paint.Style.STROKE);

			game = new GameOfLife( 10, 16 );
			mStartTime = SystemClock.elapsedRealtime();
		}

		@Override
		public void onCreate(SurfaceHolder surfaceHolder) {
			super.onCreate(surfaceHolder);

			// By default we don't get touch events, so enable them.
			setTouchEventsEnabled(true);
		}

		@Override
		public void onDestroy() {
			super.onDestroy();
			mHandler.removeCallbacks(mSampleDraw);
		}

		@Override
		public void onVisibilityChanged(boolean visible) {
			mVisible = visible;
			if (visible) {
				drawFrame();
			} else {
				mHandler.removeCallbacks(mSampleDraw);
			}
		}

		@Override
		public void onSurfaceChanged(SurfaceHolder holder, int format, int width, int height) {
			super.onSurfaceChanged(holder, format, width, height);
			drawFrame();
		}

		@Override
		public void onSurfaceCreated(SurfaceHolder holder) {
			super.onSurfaceCreated(holder);
		}

		@Override
		public void onSurfaceDestroyed(SurfaceHolder holder) {
			super.onSurfaceDestroyed(holder);
			mVisible = false;
			mHandler.removeCallbacks(mSampleDraw);
		}

		@Override
		public void onOffsetsChanged( float xOffset, float yOffset, float xStep, 
				                       float yStep, int xPixels, int yPixels) {
			drawFrame();
		}

		/*
		 * Store the position of the touch event so we can use it for drawing
		 * later
		 */
		@Override
		public void onTouchEvent(MotionEvent event) {
			mTouchX = event.getX();
			mTouchY = event.getY();
			super.onTouchEvent(event);
		}

		/*
		 * Draw one frame of the animation. This method gets called repeatedly
		 * by posting a delayed Runnable. You can do any drawing you want in
		 * here.
		 */
		void drawFrame() {
			final SurfaceHolder holder = getSurfaceHolder();

			Canvas c = null;
			try {
				c = holder.lockCanvas();
				if (c != null) {
					drawGrid(c);
				}
			} finally {
				if (c != null)
					holder.unlockCanvasAndPost(c);
			}

			// Reschedule the next redraw
			mHandler.removeCallbacks(mSampleDraw);
			if (mVisible) {
				mHandler.postDelayed(mSampleDraw, 1000 / 25);
			}
		}

		void drawGrid( Canvas cnv ) {
			float dy = cnv.getHeight() / game.grid.length;			
			for (int r=1; r<game.grid.length; r++) {
				cnv.drawLine( 0, dy*r, cnv.getWidth(), dy*r, mPaint );
			}
			float dx = cnv.getWidth() / game.grid[0].length;
			for (int c=1; c<game.grid[0].length; c++) {
				cnv.drawLine( dx*c, 0, dx*c, cnv.getHeight(), mPaint );
			}
		}
	}
}





























